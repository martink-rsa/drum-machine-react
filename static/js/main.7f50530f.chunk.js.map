{"version":3,"sources":["Components/Display/Display.js","Components/DrumMachine/DrumMachine.js","theme.js","serviceWorker.js","index.js","Components/App/App.js"],"names":["useStyles","makeStyles","root","padding","margin","width","height","displayContainer","display","alignItems","background","marginBottom","Display","props","classes","text","id","className","mainContainer","justifyContent","flexDirection","drumMachineContainer","drumPadsContainer","gridTemplateColumns","gridTemplateRows","backgroundColor","actionsContainer","marginTop","DrumButton","withStyles","boxShadow","textTransform","fontSize","borderColor","fontFamily","join","Button","DrumMachine","useState","keyPressValue","setKeyPressValue","displayText","setDisplayText","soundsLoaded","soundBank","soundMain","setSoundMain","playSound","soundIndex","chokeGroup","choke","sounds","i","length","sound","stop","play","control","name","useEffect","document","addEventListener","event","e","index","key","toUpperCase","console","log","getIndexFromEvent","handleClick","parseInt","currentTarget","dataset","drumIndex","loadSounds","a","async","sb","prevState","newState","default","importSounds","Container","maxWidth","Box","my","Paper","map","Math","random","data-drum-index","onClick","variant","theme","createMuiTheme","palette","type","primary","main","light","dark","secondary","error","red","A400","overrides","MuiPaper","MuiButton","Boolean","window","location","hostname","match","ReactDOM","render","ThemeProvider","CssBaseline","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7f50530f.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    padding: 0,\n    margin: 0,\n    width: '100%',\n    height: '100%',\n  },\n  displayContainer: {\n    display: 'flex',\n    alignItems: 'center',\n    background: 'gray',\n    height: '50px',\n    width: '350px',\n    marginBottom: '20px',\n    padding: '0 0 0 20px',\n  },\n}));\n\nfunction Display(props) {\n  const classes = useStyles();\n  const { text } = props;\n\n  return (\n    <div id=\"display\" className={classes.displayContainer}>\n      {text}\n    </div>\n  );\n}\n\nexport default Display;\n","import React, { useEffect, useState } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport Display from '../Display/Display';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    padding: 0,\n    margin: 0,\n    width: '100%',\n    height: '100%',\n  },\n  mainContainer: {\n    height: '100%',\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column',\n  },\n  drumMachineContainer: {\n    display: 'flex',\n    alignItems: 'center',\n    flexDirection: 'column',\n    background: '#202020',\n    width: '400px', // Adjust main container size here\n    height: 'auto',\n    padding: '20px',\n  },\n  displayContainer: {\n    background: 'gray',\n    height: '50px',\n    width: '350px',\n    marginBottom: '20px',\n  },\n  drumPadsContainer: {\n    display: 'grid',\n    gridTemplateColumns: '1fr 1fr 1fr',\n    gridTemplateRows: '1fr 1fr 1fr',\n    background: '#2f2f2f',\n    width: '350px',\n    height: '350px',\n    padding: '10px',\n    // width: '400px',\n  },\n  'drum-pad': {\n    backgroundColor: 'gray',\n    height: '100px',\n    width: '100%',\n  },\n  actionsContainer: {\n    height: '100px',\n    width: '350px',\n    background: 'gray',\n    marginTop: '20px',\n  },\n}));\n\nconst DrumButton = withStyles({\n  root: {\n    boxShadow: 'none',\n    textTransform: 'none',\n    fontSize: 16,\n    backgroundColor: '#7b7b7b',\n    borderColor: '#007bff',\n    fontFamily: [\n      '-apple-system',\n      'BlinkMacSystemFont',\n      '\"Segoe UI\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(','),\n    '&:hover': {\n      backgroundColor: 'rgba(0, 243, 0, .5)',\n      borderColor: 'rgba(0, 243, 0, 0.5)',\n      boxShadow: 'none',\n    },\n    '&:active': {\n      boxShadow: '0px 0px 23px -1px rgba(0, 255, 17, 1)',\n      backgroundColor: 'rgb(0, 243, 0)',\n      borderColor: 'rgb(0, 243, 0)',\n    },\n    '&:focus': {\n      boxShadow: '0px 0px 23px -1px rgba(0, 255, 17, 1)',\n    },\n  },\n})(Button);\n\nfunction DrumMachine() {\n  const classes = useStyles();\n\n  const [keyPressValue, setKeyPressValue] = useState('');\n  const [displayText, setDisplayText] = useState('');\n  const [soundMain, setSoundMain] = useState({\n    soundsLoaded: false,\n    soundBank: [],\n  });\n  const controlKeys = ['Q', 'W', 'E', 'A', 'S', 'D', 'Z', 'X', 'C'];\n\n  // Get index value from key\n  function getIndexFromEvent(e) {\n    const key = e.key.toUpperCase();\n    console.log(key);\n    let index;\n    if (key === 'Q') {\n      index = 0;\n    } else if (key === 'W') {\n      index = 1;\n    } else if (key === 'E') {\n      index = 2;\n    } else if (key === 'A') {\n      index = 3;\n    } else if (key === 'S') {\n      index = 4;\n    } else if (key === 'D') {\n      index = 5;\n    } else if (key === 'Z') {\n      index = 6;\n    } else if (key === 'X') {\n      index = 7;\n    } else if (key === 'C') {\n      index = 8;\n    }\n    return index;\n  }\n\n  useEffect(() => {\n    document.addEventListener('keydown', event =>\n      setKeyPressValue(getIndexFromEvent(event)),\n    );\n    document.addEventListener('keyup', () => setKeyPressValue(''));\n  }, []);\n\n  useEffect(() => {\n    if (keyPressValue !== '') {\n      handleKeyDown(keyPressValue);\n    }\n  }, [keyPressValue]);\n\n  // Updating the display\n  const setDisplay = control => {\n    setDisplayText(control);\n  };\n\n  function playSound(soundIndex) {\n    if (soundIndex >= 0 && soundIndex <= 9) {\n      // Get the choke if it exists\n      const chokeGroup = soundMain.soundBank[soundIndex].choke;\n\n      const sounds = soundMain.soundBank;\n      for (let i = 0; i < sounds.length; i += 1) {\n        if (sounds[i].choke === chokeGroup && sounds[i].choke !== -1) {\n          sounds[i].sound.stop();\n        }\n      }\n      // Play the sound\n      soundMain.soundBank[soundIndex].sound.play();\n      // Update the display\n      setDisplay(soundMain.soundBank[soundIndex].name);\n    }\n  }\n\n  // Button clicks\n  const handleClick = e => {\n    if (soundMain.soundsLoaded === true) {\n      const soundIndex = parseInt(e.currentTarget.dataset.drumIndex, 10);\n      playSound(soundIndex);\n    }\n  };\n\n  // Key presses\n  function handleKeyDown() {\n    if (soundMain.soundsLoaded === true) {\n      playSound(keyPressValue);\n    }\n  }\n\n  // Import sounds from .js file\n  async function importSounds() {\n    if (soundMain.soundsLoaded === false) {\n      try {\n        const sb = await import('../../Static/soundbank0');\n        setSoundMain(prevState => {\n          const newState = { ...prevState };\n          return {\n            ...newState,\n            soundBank: sb.default,\n            soundsLoaded: true,\n          };\n        });\n      } catch (error) {\n        console.log(error);\n        console.log('import failed');\n      }\n    }\n  }\n\n  function loadSounds() {\n    importSounds();\n  }\n\n  return (\n    <Container maxWidth=\"sm\">\n      <Box my={4} className={classes.mainContainer}>\n        <Paper id=\"drum-machine\" className={classes.drumMachineContainer}>\n          <Display text={displayText} />\n          <div className={classes.drumPadsContainer}>\n            {controlKeys.map((key, index) => (\n              <DrumButton\n                key={`dpad-${Math.random() * 9999}`}\n                data-drum-index={index}\n                id={`drumpad${index}`}\n                onClick={handleClick}\n              >\n                {key}\n              </DrumButton>\n            ))}\n          </div>\n        </Paper>\n        <Button variant=\"contained\" onClick={() => loadSounds(0)}>\n          Load Sounds\n        </Button>\n      </Box>\n    </Container>\n  );\n}\n\nexport default DrumMachine;\n","import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    type: 'light',\n    primary: {\n      main: '#61dafb',\n      light: '#61dafb',\n      dark: '#21a1c4',\n    },\n    secondary: {\n      main: '#b5ecfb',\n      light: '#61dafb',\n      dark: '#21a1c4',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#282c34',\n    },\n  },\n  overrides: {\n    MuiPaper: {\n      root: {\n        padding: '0px 20px',\n        margin: '20px 0',\n        backgroundColor: 'white', // 5d737e\n      },\n    },\n    MuiButton: {\n      root: {\n        margin: '5px',\n      },\n    },\n  },\n});\nexport default theme;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport App from './Components/App/App';\nimport theme from './theme';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root'),\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.css';\nimport DrumMachine from '../DrumMachine/DrumMachine';\n\n/* User Story #1: I should be able to see an outer container with a corresponding id=\"drum-machine\"\nthat contains all other elements.\n\nUser Story #2: Within #drum-machine I can see an element with a corresponding id=\"display\".\n\nUser Story #3: Within #drum-machine I can see 9 clickable drum pad elements, each with a\nclass name of drum-pad, a unique id that describes the audio clip the drum pad will be set\nup to trigger, and an inner text that corresponds to one of the following keys on the\nkeyboard: Q, W, E, A, S, D, Z, X, C. The drum pads MUST be in this order.\n\nUser Story #4: Within each .drum-pad, there should be an HTML5 audio element which has a\nsrc attribute pointing to an audio clip, a class name of clip, and an id corresponding to\nthe inner text of its parent .drum-pad (e.g. id=\"Q\", id=\"W\", id=\"E\" etc.).\n\nUser Story #5: When I click on a .drum-pad element, the audio clip contained in its child\naudio element should be triggered.\n\nUser Story #6: When I press the trigger key associated with each .drum-pad, the audio clip\ncontained in its child audio element should be triggered (e.g. pressing the Q key should\n  trigger the drum pad which contains the string \"Q\", pressing the W key should trigger\n  the drum pad which contains the string \"W\", etc.).\n\nUser Story #7: When a .drum-pad is triggered, a string describing the associated audio clip\nis displayed as the inner text of the #display element (each string must be unique). */\n\nexport default function App() {\n  return <DrumMachine />;\n}\n"],"sourceRoot":""}